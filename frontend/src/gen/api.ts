// tslint:disable
/**
 * portal.reud.net API
 * reudのポートフォリオサイトのバックエンドAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    href: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    wsfeImageSource: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    irjpImageSource: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    tag1: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    tag2?: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    tag3?: string;
}
/**
 * 
 * @export
 * @interface StoredBook
 */
export interface StoredBook {
    /**
     * 
     * @type {number}
     * @memberof StoredBook
     */
    ID: number;
    /**
     * 
     * @type {Book}
     * @memberof StoredBook
     */
    book?: Book;
}

/**
 * BookshelfApi - axios parameter creator
 * @export
 */
export const BookshelfApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * amazonの本を投稿できる機能(amazonにあるもの)
         * @summary Add a new book to bookshelf
         * @param {Book} body 本の情報は本棚に登録するために必要である。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReudBook(body: Book, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addReudBook.');
            }
            const localVarPath = `/bookshelf`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth0Auth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * amazonの投稿した本を削除する機能
         * @summary delete book by id
         * @param {number} bookId Bookのid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReudBook(bookId: number, options: any = {}): RequestArgs {
            // verify required parameter 'bookId' is not null or undefined
            if (bookId === null || bookId === undefined) {
                throw new RequiredError('bookId','Required parameter bookId was null or undefined when calling deleteReudBook.');
            }
            const localVarPath = `/bookshelf/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth0Auth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DBに保存された本の情報の取得
         * @summary Get books I read, from DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReudBook(options: any = {}): RequestArgs {
            const localVarPath = `/bookshelf`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookshelfApi - functional programming interface
 * @export
 */
export const BookshelfApiFp = function(configuration?: Configuration) {
    return {
        /**
         * amazonの本を投稿できる機能(amazonにあるもの)
         * @summary Add a new book to bookshelf
         * @param {Book} body 本の情報は本棚に登録するために必要である。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReudBook(body: Book, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BookshelfApiAxiosParamCreator(configuration).addReudBook(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * amazonの投稿した本を削除する機能
         * @summary delete book by id
         * @param {number} bookId Bookのid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReudBook(bookId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BookshelfApiAxiosParamCreator(configuration).deleteReudBook(bookId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * DBに保存された本の情報の取得
         * @summary Get books I read, from DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReudBook(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoredBook>> {
            const localVarAxiosArgs = BookshelfApiAxiosParamCreator(configuration).getReudBook(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BookshelfApi - factory interface
 * @export
 */
export const BookshelfApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * amazonの本を投稿できる機能(amazonにあるもの)
         * @summary Add a new book to bookshelf
         * @param {Book} body 本の情報は本棚に登録するために必要である。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReudBook(body: Book, options?: any) {
            return BookshelfApiFp(configuration).addReudBook(body, options)(axios, basePath);
        },
        /**
         * amazonの投稿した本を削除する機能
         * @summary delete book by id
         * @param {number} bookId Bookのid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReudBook(bookId: number, options?: any) {
            return BookshelfApiFp(configuration).deleteReudBook(bookId, options)(axios, basePath);
        },
        /**
         * DBに保存された本の情報の取得
         * @summary Get books I read, from DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReudBook(options?: any) {
            return BookshelfApiFp(configuration).getReudBook(options)(axios, basePath);
        },
    };
};

/**
 * BookshelfApi - object-oriented interface
 * @export
 * @class BookshelfApi
 * @extends {BaseAPI}
 */
export class BookshelfApi extends BaseAPI {
    /**
     * amazonの本を投稿できる機能(amazonにあるもの)
     * @summary Add a new book to bookshelf
     * @param {Book} body 本の情報は本棚に登録するために必要である。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookshelfApi
     */
    public addReudBook(body: Book, options?: any) {
        return BookshelfApiFp(this.configuration).addReudBook(body, options)(this.axios, this.basePath);
    }

    /**
     * amazonの投稿した本を削除する機能
     * @summary delete book by id
     * @param {number} bookId Bookのid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookshelfApi
     */
    public deleteReudBook(bookId: number, options?: any) {
        return BookshelfApiFp(this.configuration).deleteReudBook(bookId, options)(this.axios, this.basePath);
    }

    /**
     * DBに保存された本の情報の取得
     * @summary Get books I read, from DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookshelfApi
     */
    public getReudBook(options?: any) {
        return BookshelfApiFp(this.configuration).getReudBook(options)(this.axios, this.basePath);
    }

}


